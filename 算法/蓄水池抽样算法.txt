**问题：给定一个集合，集合长度N很大，且N直到处理完所有数据之前都不可知，请问如何在只遍历一遍数据（O(N)）的情况下，能够随机选取出m个不重复的数据。**

这个场景强调了3件事：
1、数据流长度N很大且不可知，所以不能一次性存入内存。
2、时间复杂度为O(N)。
3、随机选取m个数，每个数被选中的概率为m/N。

第1点限制了不能直接取N内的m个随机数，然后按索引取出数据。第2点限制了不能先遍历一遍，然后分块存储数据，再随机选取。第3点是数据选取绝对随机的保证。

#蓄水池抽样算法的核心如下：
int[] reservoir = new int[m];
// init
for (int i = 0; i < reservoir.length; i++)
{
    reservoir[i] = dataStream[i];
}

for (int i = m; i < dataStream.length; i++)
{
    // 随机获得一个[0, i]内的随机整数
    int d = rand.nextInt(i + 1);
    // 如果随机整数落在[0, m-1]范围内，则替换蓄水池中的元素
    if (d < m)//事件的概率为m/i
    {
        reservoir[d] = dataStream[i];
    }
}
**
	已知i=m,m+1,m+2,m+3,...,n;
	选取元素初始为[0,m-1]
	则分两种情况，一种为在里面的元素。
	它不被换出去的概率为：m/m+1*m+1/m+2*m+2/m+3*m+3/m+4*...*n-1/n=m/n
	另一种是在外面的元素，假设它为第t的元素，它被替换进去的概率为：m/t
		进去之后不再出来的概率为t/t+1*t+1/t+2*...*n-1/n
		所以t元素进去且进入后不再出来的概率为m/n
	所以不管怎么样，每一个元素最后留在蓄水池里的概率都为m/n
**

#分布式蓄水池抽样
如果遇到超大的数据量，即使是O(N)的时间复杂度，蓄水池抽样程序完成抽样任务也将耗时很久。此时，常常需要分布式系统来解决。

假设有K台机器, 将N条数据分布到每台机器上，每台机次持有Ni条数据。(i=1,2,3,...,K)
则有N1+N2+...+Nk=N
现让每台机器进行单机的蓄水池抽样。抽出M个样本。即每条数据被抽出的概率为M/Ni
然后，重复M次以下操作:
取随机数d在[0,N)之间。
若d<N1则从第一个机器上不放回的抽取一个元素.
若N<=d<(N1+N2)则从第二个机器上不放回的抽取一个元素
依此类推。
则选中第i台机器的概率为Ni/N;

此时分两种情况：
假设Ni>M:
因为第i个机器上数据的留存概率为M/Ni, 而采样时又以Ni/N的概率抽取该机器, 又以1/M的概率等概率不放回地选取一个元素, 所以第i个机器上一个数据被抽中的概率为M/Ni * Ni/N * 1/M = 1/N. 这样重复M次, 每个元素被抽取到的概率就是M/N.

假设Ni<=M
第i个机器上数据的留存概率为1, 采样时以Ni/N的概率抽取该机器, 又以1/Ni的概率等概率不放回地选取一个元素, 所以第i个机器上一个数据被抽中的概率为1/N. 同样, 重复M次让每个元素被抽取到的概率为M/N.
