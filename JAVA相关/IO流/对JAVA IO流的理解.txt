【java的io是实现输入和输出的基础，可以方便的实现数据的输入和输出操作。在java中把不同的输入/输出源（键盘，文件，网络连接等）抽象表述为“流”(stream)。通过流的形式允许java程序使用相同的方式来访问不同的输入/输出源。stram是从起源（source）到接收的（sink）的有序数据。】

1、I/O流的分类：：
	按照不同的分类方式，可以把流分为不同的类型。常用的分类有三种：

	(1) 按照流的流向分，可以分为输入流和输出流
		-1 输入流： 只能从中读取数据，而不能向其写入数据。比如客户端上传文件到服务器。
		-2 输出流：只能向其写入数据，而不能向其读取数据。比如从内存写入硬盘。
		!所以，输入输出的方向，是从程序运行的内存考虑的。
		注：java的输入流主要是InputStream和Reader作为基类，而输出流则是主要由outputStream和Writer作为基类。它们都是一些抽象基类，无法直接创建实例。
	(2) 按照操作单元划分，可以划分为字节流和字符流
		字节流和字符流的用法几乎完成全一样，区别在于字节流和字符流所操作的数据单元不同，字节流操作的单元是数据单元是8位的字节(byte)，字符流操作的是数据单元为16位的字符(char)。
		字节流主要是由InputStream和outPutStream作为基类，而字符流则主要有Reader和Writer作为基类。
		
		注：如果是操作二进制文件那我们就使用字节流，如果操作的是文本文件那我们就使用字符流。	
	(3) 按照流的角色划分为节点流和处理流
		1 可以从/向一个特定的IO设备（如磁盘，网络）读/写数据的流，称为节点流。使用节点流进行输入和输出时，程序直接连接到实际的数据源，和实际的输入/输出节点连接。节点流被称为低级流。 
		2 处理流则用于对一个已存在的流进行连接和封装，通过封装后的流来实现数据的读/写功能。当使用处理流进行输入/输出时，程序并不会直接连接到实际的数据源，没有和实际的输入和输出节点连接。使用处理流的一个明显的好处是，只要使用相同的处理流，程序就可以采用完全相同的输入/输出代码来访问不同的数据源，随着处理流所包装的节点流的变化，程序实际所访问的数据源也相应的发生变化。处理流被称为高级流。
		
2、常用的io流的用法:
	java Io流共涉及40多个类，这些类看上去很杂乱，但实际上很有规则，而且彼此之间存在非常紧密的联系， Java Io流的40多个类都是从如下4个抽象类基类中派生出来的。
	#InputStream/Reader:所有的输入流的基类，前者是字节输入流，后者是字符输入流。
	#OutputStream/Writer:所有输出流的基类，前者是字节输出流，后者是字符输出流。
	
	<1>InputStream和Reader是所有输入流的抽象基类，本身并不能创建实例来执行输入，但它们将成为所有输入流的模板，所以它们的方法是所有输入流都可使用的方法。 
	在InputStream里面包含如下3个方法。
	(1) int read()		
		从输入流中读取单个字节，返回所读取的字节数据。
	(2)	int read(byte[] b)
		从输入流中最多读取b.length个字节的数据，并将其存储在字节数组b中，返回实际读取的字节数。
	(3) int read(byte[] b,int off,int len)
		从输入流中最多读取len个字节的数据，并将其存储在数组b中，放入数组b中时，并不是从数组起点开始，而是从off位置开始，返回实际读取的字节数。
	在Reader中包含如下3个方法。
	(1)	int read()
		从输入流中读取单个字符，返回所读取的字符数据。
	(2) int read(char[] b)
		从输入流中最多读取b.length个字符的数据，并将其存储在字节数组b中，返回实际读取的字符数。
	(3) int read(char[] b,int off,int len) 		
		从输入流中最多读取len个字符的数据，并将其存储在数组b中，放入数组b中时，并不是从数组起点开始，而是从off位置开始，返回实际读取的字符数。
	!对比InputStream和Reader所提供的方法，就不难发现这两个基类的功能基本是一样的。InputStream和Reader都是将输入数据抽象成水管，程序通过read方法每次读取一个或多个”水滴“，然后转换成相应的数据；程序多次重复这个“取水”过程，直到read方法返回-1，表明到了输入流的结束点。

	<2>OutputStream和Writer的用法也非常相似，两个流都提供了如下三个方法：

	(1) void write(int c); 将指定的字节/字符输出到输出流中，其中c即可以代表字节，也可以代表字符。
	(2) void write(byte[]/char[] buf); 将字节数组/字符数组中的数据输出到指定输出流中。
	(3) void write(byte[]/char[] buf, int off,int len ); 将字节数组/字符数组中从off位置开始，长度为len的字节/字符输出到输出流中。
	因为字符流直接以字符作为操作单位，所以Writer可以用字符串来代替字符数组，即以String对象作为参数。
	于是Writer里面还包含如下两个方法。
	(4) void write(String str);
	(5) void write (String str, int off, int len); 
	
	#以文件流举例：
	FileInputStream和FileReader，它们是节点流————会直接和指定文件关联。
	下面程序示范使用FileInputStream和FileReader。 
	(1) 使用FileInputStream读取文件：
		FileInputStream fis=null;
		  try {
			  //创建字节输入流
			  fis=new FileInputStream("E:\\learnproject\\Iotest\\lib\\src\\main\\java\\com\\Test.txt");
			  //创建一个长度为1024的竹筒
			  byte[] b=new byte[1024];
			  //用于保存的实际字节数
			  int hasRead=0;
			  //使用循环来重复取水的过程
			  while((hasRead=fis.read(b))>0){
				  //取出竹筒中的水滴（字节），将字节数组转换成字符串进行输出
				System.out.print(new String(b,0,hasRead));
			  }
		  } catch (IOException e){
			e.printStackTrace();
		  } finally {
			  fis.close();
      }
	  注意：上面程序最后使用了fis.close()来关闭该文件的输入流，与JDBC编程一样，程序里面打开的文件IO资源不属于内存的资源，垃圾回收机制无法回收该资源，所以应该显示的关闭打开的IO资源。Java7改写了所有的IO资源类，它们都实现了AntoCloseable接口，因此都可以通过自动关闭资源的try语句来关闭这些Io流。
	(2) 使用FileReader读取文件：
		FileReader fis=null;
		try {
			//创建字节输入流
			fis=new FileReader("E:\\learnproject\\Iotest\\lib\\src\\main\\java\\com\\Test.txt");
			//创建一个长度为1024的竹筒
			char[] b=new char[1024];
			//用于保存的实际字节数
			int hasRead=0;
			//使用循环来重复取水的过程
			while ((hasRead=fis.read(b))>0){
				//取出竹筒中的水滴（字节），将字节数组转换成字符串进行输出
				System.out.print(new String(b,0,hasRead));
			}
		} catch (IOException e){
			e.printStackTrace();
		} finally {
			fis.close();
		}
	(3) 使用FileOutputStream写文件：
		FileInputStream fis=null;
        FileOutputStream fos=null;
        try {
            //创建字节输入流
            fis=new FileInputStream("E:\\learnproject\\Iotest\\lib\\src\\main\\java\\com\\Test.txt");
            //创建字节输出流
            fos=new FileOutputStream("E:\\learnproject\\Iotest\\lib\\src\\main\\java\\com\\newTest.txt");
 
            byte[] b=new byte[1024];
            int hasRead=0;
 
            //循环从输入流中取出数据
            while((hasRead=fis.read(b))>0){
                //每读取一次，即写入文件输入流，读了多少，就写多少。
                fos.write(b,0,hasRead);
            }
        }catch (IOException e){
            e.printStackTrace();
        }finally {
            fis.close();
            fos.close();
        }
	注：使用java的io流执行输出时，不要忘记关闭输出流，关闭输出流除了可以保证流的物理资源被回收之外，可能还可以将输出流缓冲区中的数据flush到物理节点中里（因为在执行close（）方法之前，自动执行输出流的flush（）方法）。java很多输出流默认都提供了缓存功能，其实我们没有必要刻意去记忆哪些流有缓存功能，哪些流没有，只有正常关闭所有的输出流即可保证程序正常。
