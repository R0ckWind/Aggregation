谈到并发，不得不谈ReentrantLock；而谈到ReentrantLock，不得不谈AbstractQueuedSynchronizer（AQS）！
类如其名，抽象的队列式的同步器，AQS定义了一套多线程访问共享资源的同步器框架，许多同步类实现都依赖于它，如常用的ReentrantLock/Semaphore/CountDownLatch...。

AQS维护了一个volatile int state（代表共享资源）和一个FIFO线程等待队列（多线程争用资源被阻塞时会进入此队列）。state的访问方式有三种:
1、getState()
2、setState()
3、compareAndSetState()
AQS定义两种资源共享方式：Exclusive（独占，只有一个线程能执行，如ReentrantLock）和Share（共享，多个线程可同时执行，如Semaphore/CountDownLatch）。

不同的自定义同步器争用共享资源的方式也不同。自定义同步器在实现时只需要实现共享资源state的获取与释放方式即可，至于具体线程等待队列的维护（如获取资源失败入队/唤醒出队等），AQS已经在顶层实现好了。
#自定义同步器实现时主要实现以下几种方法：
(1) isHeldExclusively()//该线程是否正在独占资源。只有用到condition才需要去实现它。
(2) tryAcquire(int)//独占方式。尝试获取资源，成功则返回true，失败则返回false。
(3) tryRelease(int)//独占方式。尝试释放资源，成功则返回true，失败则返回false。
(4) tryAcquireShared(int)//共享方式。尝试获取资源。负数表示失败；0表示成功，但没有剩余可用资源；正数表示成功，且有剩余资源。
(5) tryReleaseShared(int)//共享方式。尝试释放资源，如果释放后允许唤醒后续等待结点返回true，否则返回false。

　以ReentrantLock为例，state初始化为0，表示未锁定状态。A线程lock()时，会调用tryAcquire()独占该锁并将state+1。
此后，其他线程再tryAcquire()时就会失败，直到A线程unlock()到state=0（即释放锁）为止，其它线程才有机会获取该锁。当然，释放锁之前，A线程自己是可以重复获取此锁的（state会累加），这就是可重入的概念。但要注意，获取多少次就要释放多么次，这样才能保证state是能回到零态的。

　　再以CountDownLatch以例，任务分为N个子线程去执行，state也初始化为N（注意N要与线程个数一致）。这N个子线程是并行执行的，每个子线程执行完后countDown()一次，state会CAS减1。等到所有子线程都执行完后(即state=0)，会unpark()主调用线程，然后主调用线程就会从await()函数返回，继续后余动作。

　　一般来说，自定义同步器要么是独占方法，要么是共享方式，他们也只需实现tryAcquire-tryRelease、tryAcquireShared-tryReleaseShared中的一种即可。但AQS也支持自定义同步器同时实现独占和共享两种方式，如ReentrantReadWriteLock。


#源码详解
	1、结点状态waitStatus
	Node结点是对每一个等待获取资源的线程的封装，其包含了需要同步的线程本身及其等待状态，如是否被阻塞、是否等待唤醒、是否已经被取消等。变量waitStatus则表示当前Node结点的等待状态，共有5种取值CANCELLED、SIGNAL、CONDITION、PROPAGATE、0。

	CANCELLED(1)表示当前结点已取消调度。当timeout或被中断（响应中断的情况下），会触发变更为此状态，进入该状态后的结点将不会再变化。

	SIGNAL(-1)：表示后继结点在等待当前结点唤醒。后继结点入队时，会将前继结点的状态更新为SIGNAL。

	CONDITION(-2)：表示结点等待在Condition上，当其他线程调用了Condition的signal()方法后，CONDITION状态的结点将从等待队列转移到同步队列中，等待获取同步锁。

	PROPAGATE(-3)：共享模式下，前继结点不仅会唤醒其后继结点，同时也可能会唤醒后继的后继结点。

	0：新结点入队时的默认状态。

	注意，负值表示结点处于有效等待状态，而正值表示结点已被取消。所以源码中很多地方用>0、<0来判断结点的状态是否正常。
	
	2、acquire(int)
	此方法是独占模式下线程获取共享资源的顶层入口。如果获取到资源，线程直接返回，否则进入等待队列，直到获取到资源为止，且整个过程忽略中断的影响。这也正是lock()的语义，当然不仅仅只限于lock()。获取到资源后，线程就可以去执行其临界区代码了。
	 public final void acquire(int arg) {
	     if (!tryAcquire(arg) &&
	         acquireQueued(addWaiter(Node.EXCLUSIVE), arg))
	         selfInterrupt();
	 }
	函数流程如下：
	(1)
		tryAcquire()尝试直接去获取资源，如果成功则直接返回
		!这里体现了非公平锁，每个线程获取锁时会尝试直接抢占加塞一次，而CLH队列中可能还有别的线程在等待
	(2)
		addWaiter()将该线程加入等待队列的尾部，并标记为独占模式
	(3)
		acquireQueued()使线程阻塞在等待队列中获取资源，一直获取到资源后才返回。
		如果在整个等待过程中被中断过，则返回true，否则返回false。
	(4)
		如果线程在等待过程中被中断过，它是不响应的。只是获取资源后才再进行自我中断selfInterrupt()，将中断补上。
	3、tryAcquire(int)
	此方法尝试去获取独占资源。如果获取成功，则直接返回true，否则直接返回false。这也正是tryLock()的语义，还是那句话，当然不仅仅只限于tryLock()。
	#如下是tryAcquire的源码：
	 protected boolean tryAcquire(int arg) {
		 throw new UnsupportedOperationException();
	 }
	 AQS这里只定义了一个接口，具体资源的获取交由自定义同步器去实现（通过state的get/set/CAS）。至于能不能重入，能不能加塞，要看具体的自定义同步器怎么去设计了。当然，自定义同步器在进行资源访问时要考虑线程安全的影响。

　　该方法之所以没有定义成abstract，是因为独占模式下只用实现tryAcquire-tryRelease，而共享模式下只用实现tryAcquireShared		-tryReleaseShared。
	如果都定义成abstract，那么每个模式也要去实现另一模式下的接口。说到底，DougLea还是站在咱们开发者的角度，尽量减少不必要的工作量。
	
	4、addWaiter(Node)
	#此方法用于将当前线程加入到等待队列的队尾，并返回当前线程所在的结点。
	private Node addWaiter(Node mode) {
		//以给定模式构造结点。mode有两种：EXCLUSIVE（独占）和SHARED（共享）
		Node node = new Node(Thread.currentThread(), mode);
		
		//尝试快速方式直接放到队尾。
		Node pred = tail;
		if (pred != null) {
			node.prev = pred;
			if (compareAndSetTail(pred, node)) {//CAS设置尾节点
				pred.next = node;
				return node;
			}
		}
		//上一步失败则通过enq入队。
		enq(node);
		return node;
	}
	private Node enq(final Node node) {
		//CAS"自旋"，直到成功加入队尾
		for (;;) {
			Node t = tail;
			if (t == null) { // 队列为空，创建一个空的标志结点作为head结点，并将tail也指向它。
				if (compareAndSetHead(new Node()))//CAS设置头节点
					tail = head;
			} else {//正常流程，放入队尾
				node.prev = t;
				if (compareAndSetTail(t, node)) {//CAS设置尾节点
					t.next = node;
					return t;
				}
			}
		}
	}
	5、acquireQueued(Node, int)
	通过tryAcquire()和addWaiter()，该线程获取资源失败，已经被放入等待队列尾部了。
	此时，线程将会进入等待状态，直到其他线程彻底释放资源后唤醒自己，开始工作。
	final boolean acquireQueued(final Node node, int arg) {
		boolean failed = true;//标记是否成功拿到资源
		try {
			boolean interrupted = false;//标记等待过程中是否被中断过
			
			//又是一个“自旋”！
			for (;;) {
				final Node p = node.predecessor();//拿到前驱
				//如果前驱是head，即该结点已成老二，那么便有资格去尝试获取资源（可能是老大释放完资源唤醒自己的，当然也可能被interrupt了）。
				if (p == head && tryAcquire(arg)) {
					setHead(node);//拿到资源后，将head指向该结点。所以head所指的标杆结点，就是当前获取到资源的那个结点或null。
					p.next = null; // setHead中node.prev已置为null，此处再将head.next置为null，就是为了方便GC回收以前的head结点。也就意味着之前拿完资源的结点出队了！
					failed = false; // 成功获取资源
					return interrupted;//返回等待过程中是否被中断过
				}
				
				//如果自己可以休息了，就通过park()进入waiting状态，直到被unpark()。如果不可中断的情况下被中断了，那么会从park()中醒过来，发现拿不到资源，从而继续进入park()等待。
				if (shouldParkAfterFailedAcquire(p, node) &&
					parkAndCheckInterrupt())
					interrupted = true;//如果等待过程中被中断过，哪怕只有那么一次，就将interrupted标记为true
			}
		} finally {
			if (failed) // 如果等待过程中没有成功获取资源（如timeout，或者可中断的情况下被中断了），那么取消结点在队列中的等待。
				cancelAcquire(node);
		}
	}
	#shouldParkAfterFailedAcquire用于检查状态，看看自己是否真的可以去休息了
	private static boolean shouldParkAfterFailedAcquire(Node pred, Node node) {
		int ws = pred.waitStatus;//拿到前驱的状态
		if (ws == Node.SIGNAL)
			//如果已经告诉前驱拿完号后通知自己一下，那就可以安心休息了
			return true;
		if (ws > 0) {
			/*
			 * 如果前驱放弃了，那就一直往前找，直到找到最近一个正常等待的状态，并排在它的后边。
			 * 注意：那些放弃的结点，由于被自己“加塞”到它们前边，它们相当于形成一个无引用链，稍后就会被保安大叔赶走了(GC回收)！
			 */
			do {
				node.prev = pred = pred.prev;
			} while (pred.waitStatus > 0);
			pred.next = node;
		} else {
			 //如果前驱正常，那就把前驱的状态设置成SIGNAL，告诉它拿完号后通知自己一下。有可能失败，人家说不定刚刚释放完呢！
			compareAndSetWaitStatus(pred, ws, Node.SIGNAL);
		}
		return false;
	}	
	#如果线程找好安全休息点后，那就可以安心去休息了。此方法就是让线程去休息，真正进入等待状态。
	private final boolean parkAndCheckInterrupt() {
		LockSupport.park(this);//调用park()使线程进入waiting状态
		return Thread.interrupted();//如果被唤醒，查看自己是不是被中断的。
	}
	**所以，acquireQueued()的具体流程是：
		结点进入队尾后，检查状态，找到安全休息点；
		调用park()进入waiting状态，等待unpark()或interrupt()唤醒自己；
		被唤醒后，看自己是不是有资格能拿到资源。如果拿到，head指向当前结点，并返回从入队到拿到号的整个过程中是否被中断过；如果没拿到，继续休息。
https://www.cnblogs.com/waterystone/p/4920797.html
